sbox = [
    66,
    53,
    242,
    150,
    205,
    0,
    206,
    192,
    77,
    200,
    7,
    130,
    81,
    193,
    198,
    249,
    122,
    56,
    74,
    21,
    190,
    175,
    245,
    174,
    243,
    126,
    101,
    118,
    114,
    10,
    59,
    102,
    65,
    103,
    12,
    189,
    159,
    98,
    251,
    177,
    241,
    35,
    240,
    25,
    17,
    248,
    85,
    171,
    247,
    155,
    20,
    196,
    254,
    168,
    121,
    158,
    37,
    228,
    24,
    169,
    63,
    224,
    164,
    33,
    238,
    67,
    163,
    96,
    45,
    47,
    72,
    43,
    90,
    27,
    212,
    86,
    41,
    215,
    123,
    16,
    195,
    182,
    14,
    246,
    93,
    46,
    237,
    172,
    134,
    131,
    154,
    88,
    44,
    185,
    28,
    146,
    127,
    34,
    100,
    1,
    55,
    202,
    111,
    132,
    125,
    139,
    13,
    143,
    71,
    87,
    148,
    219,
    178,
    99,
    217,
    30,
    62,
    140,
    32,
    227,
    92,
    226,
    214,
    6,
    176,
    135,
    78,
    170,
    5,
    255,
    179,
    133,
    19,
    230,
    15,
    36,
    113,
    26,
    186,
    58,
    141,
    42,
    84,
    104,
    60,
    239,
    3,
    52,
    49,
    117,
    234,
    39,
    61,
    116,
    204,
    157,
    181,
    64,
    48,
    79,
    70,
    110,
    250,
    75,
    82,
    50,
    229,
    105,
    162,
    191,
    124,
    207,
    210,
    156,
    197,
    231,
    252,
    68,
    216,
    173,
    218,
    23,
    144,
    31,
    69,
    89,
    188,
    161,
    199,
    54,
    38,
    57,
    142,
    137,
    8,
    108,
    115,
    97,
    194,
    223,
    147,
    73,
    152,
    51,
    4,
    9,
    183,
    221,
    253,
    187,
    128,
    112,
    153,
    167,
    208,
    184,
    209,
    236,
    233,
    160,
    18,
    91,
    213,
    107,
    29,
    151,
    136,
    2,
    106,
    119,
    109,
    80,
    138,
    235,
    165,
    120,
    129,
    201,
    11,
    83,
    222,
    211,
    166,
    203,
    22,
    225,
    232,
    94,
    220,
    149,
    95,
    76,
    40,
    244,
    145,
    180,
]


# soooo as it turns out the encrypion function is not so good after all, il looks like the second element of the sbox is 1, making the substitution element completely absent from the second byte of every encrypted plaintext,
# and soooo, here we are making a little meet in the middle attack to find some bytes that could have been used in the two keys we are looking for in the second position


pt = 32 # 32 is the integer representation of b" ", the space character that is the second byte in the plaintext
ch = 0xf1 # this is the integer-converted second byte of the ciphertext
encdict = {}

# start a small meet in the middle attack, encrypt the cyphertext with all the possible keys for one byte (0x100), and store them in a dictionary
for key in range(0x100):
    enc = pt
    for r in range(7):
        enc = enc ^ key
        enc = sbox[enc]
    encdict[enc] = key


# now decrypt the chipertext with all the possible keys and check every time if there is a match in decrypted value in the encryption dictionary.
# if a match is found, add 1 to the matches count, print the important values and store them into two strings formatted so that you will be ablo to copy paste them into a golang slice 
enckeys = ''
deckeys = ''
count = 0

for key in range(0, 0x100):
    dec = ch
    for r in range(7):
        dec = sbox.index(dec)
        dec = dec ^ key
    if dec in encdict:
        count += 1
        enckeys += str(encdict[dec]) + ', '
        deckeys += str(key) + ', '
        print('chiave enc: ', encdict[dec], '\nchiave dec: ', key, '\nbyte di corrispondenza: ', dec)

# print the results and copy paste them into the big meet in the middle attack go program
print(count)
print(enckeys)
print(deckeys)


    

